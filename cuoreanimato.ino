// display animation of 12 LEDs over 4 pins using charliplexing
// connect LEDs directly to an Arduino UNO or ATINY13
#include <avr/pgmspace.h>

//definition of the pattern to be displayed
#define nstep 168
const byte patt[2 * nstep] PROGMEM = {

  0B00000000, 0B00000001,
  0B00000000, 0B00000011,
  0B00000000, 0B00000111,
  0B00000000, 0B00001111,
  0B00000000, 0B00011111,
  0B00000000, 0B00111111,
  0B00000000, 0B01111111,
  0B00000000, 0B11111111,
  0B00000001, 0B11111111,
  0B00000011, 0B11111111,
  0B00000111, 0B11111111,
  0B00001111, 0B11111111,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00000000, 0B00000000,

  0B00000000, 0B00000001,
  0B00001000, 0B00000001,
  0B00001100, 0B00000001,
  0B00001110, 0B00000001,
  0B00001111, 0B00000001,
  0B00001111, 0B10000001,
  0B00001111, 0B11000001,
  0B00001111, 0B11100001,
  0B00001111, 0B11110001,
  0B00001111, 0B11111001,
  0B00001111, 0B11111101,
  0B00001111, 0B11111111,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,

  0B00000000, 0B00000001,
  0B00001000, 0B00000001,
  0B00001000, 0B00000011,
  0B00001100, 0B00000011,
  0B00001100, 0B00000111,
  0B00001110, 0B00000111,
  0B00001110, 0B00001111,
  0B00001111, 0B00001111,
  0B00001111, 0B00011111,
  0B00001111, 0B10011111,
  0B00001111, 0B10111111,
  0B00001111, 0B11111111,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00000000, 0B00000000,

  0B00000000, 0B01000000,
  0B00000000, 0B01100000,
  0B00000000, 0B11100000,
  0B00000000, 0B11110000,
  0B00000001, 0B11110000,
  0B00000001, 0B11111000,
  0B00000011, 0B11111000,
  0B00000011, 0B11111100,
  0B00000111, 0B11111100,
  0B00000111, 0B11111110,
  0B00001111, 0B11111110,
  0B00001111, 0B11111111,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00000000, 0B00000000,

  0B00000001, 0B00010000,
  0B00000011, 0B10111000,
  0B00000111, 0B11111100,
  0B00001111, 0B11111110,
  0B00001111, 0B11111111,
  0B00001110, 0B11101111,
  0B00001100, 0B01000111,
  0B00001000, 0B00000011,
  0B00000000, 0B00000001,
  0B00000001, 0B00010000,
  0B00000011, 0B10111000,
  0B00000111, 0B11111100,
  0B00001111, 0B11111110,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00000000, 0B00000000,

  0B00000000, 0B00000001,
  0B00001000, 0B00000011,
  0B00001100, 0B01000111,
  0B00001110, 0B11101111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111110,
  0B00000111, 0B11111100,
  0B00000011, 0B10111000,
  0B00000001, 0B00010000,
  0B00000000, 0B00000001,
  0B00001000, 0B00000011,
  0B00001100, 0B01000111,
  0B00001110, 0B11101111,

  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00001111, 0B11111111,
  0B00000000, 0B00000000,
  0B00000000, 0B00000000,

  0B00001111, 0B11100111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11111111,

  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,
  0B00001111, 0B11100111,
  0B00001111, 0B11111111,




};

// this parameter determines the speed
#define steptime 200


#define nled 12
//define how each led is switched on. first digit is high port. second digit is low port.
const byte code[nled] = {
  //  0x01,0x10,0x02,0x20,0x12,0x21,0x03,0x30,0x13,0x31,0x23,0x32
  0x02, 0x20, 0x23, 0x32, 0x13, 0x31, 0x12, 0x01, 0x30, 0x03, 0x10, 0x21
};


void setup() {
  //set LED pins to high impedance
  DDRB = 0;
  PORTB = 0;
}

byte istep = 0;

void loop() {

  //retrieve the pattern for this step
  byte p2 = pgm_read_byte_near(patt + 2 * istep);
  byte p1 = pgm_read_byte_near(patt + 2 * istep + 1);
  unsigned int p = p1 + (p2 << 8);

  //loop over the LEDs
  for (unsigned int i = 0; i < steptime; i++) {
    for (byte iled = 0; iled < nled; iled++) {
      byte b1 = code[iled] & 0x0F;
      byte b2 = (code[iled] & 0xF0) >> 4;
      if ( p & (1 << iled)) {
        DDRB = ((1 << b1) | (1 << b2));
        PORTB = (1 << b1);
      }
      delayMicroseconds(100);
      DDRB = 0; PORTB = 0;
    }
  }

  //go to next step
  istep++;
  if (istep >= nstep) istep = 0;
}
